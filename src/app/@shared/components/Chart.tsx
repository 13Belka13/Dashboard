import { Flex, Select, Spacer } from "@chakra-ui/react";
import React from "react";
import { useState } from "react";
import { Bar, Chart } from "react-chartjs-2";
import { RegionCSV } from "../../data/region";
import { regions } from "../../data/regions-csv";

import {
    Chart as ChartJS,
    LinearScale,
    CategoryScale,
    BarElement,
    PointElement,
    LineElement,
    Legend,
    Tooltip,
    LineController,
    BarController,
} from 'chart.js';
import { Chart } from 'react-chartjs-2';

ChartJS.register(
    LinearScale,
    CategoryScale,
    BarElement,
    PointElement,
    LineElement,
    Legend,
    Tooltip,
    LineController,
    BarController
  );

const options = {
    plugins: {
        legend: {
            display: false,
        },
    },
};

<<<<<<< HEAD
const params: string[] = [
    " ТВ-сюжетов",
    "Регион",
    "Округ",
    "Кол-во реализуемых направлений государственной молодeжной политики",
    "Суммарное Кол-во грантов",
    "Суммарный Бюджет грантов, руб",
    "Cуммарное количество детских и молодeжных общественных объединений",
    "Средняя численность молодeжи, задействованной в программном мероприятие",
    "Cуммарное кол-во структур",
    "Всего кол-во сотрудников",
    "Всего с профильным образованием",
    "Всего объeм финансирования",
    "Расходы на мероприятия",
    "Расходы на адм функции",
    "Расходы на ремонт",
    "Количество новостей, опубликованных от региона на официальном сайте федерального органа исполнительной власти, осуществляющего функции по оказанию государственных услуг и управлению государственным имуществом в сфере государственной молодeжной политики",
    "Количество упоминаний реагионального органа исполнительной власти, реализующего государственную молодeжную политику, в том числе:",
    "Количество просмотров официального сайта органа исполнительной власти, реализующего государственную молодeжную политику",
    "Численность подписчиков / участников сообществ регионального органа исполнительной власти, реализующего государственную молодeжную политику в социальных сетях",
    "Количество публикаций в сообществах регионального органа исполнительной власти, реализующего государственную молодeжную политику в социальных сетях",
    "Численость уникальных пользователей, посетивших официальный сайт регионального органа исполнительной власти, реализующего государственную молодeжную политику",
    " в печатных средствах массовой информации",
    "Количество статей, опубликованных региональным органом исполнительной власти, реализующим государственную молодeжную политику, направленных пресс-службой федерального органа исполнительной власти, осуществляющего функции по оказанию государственных услуг и управлению государственным имуществом в сфере государственной молодeжной политики	Количество статей, опубликованных в главном правительственном печатном издании субъекта",
    "Российской Федерации о реализации государственной молодeжной политики в регионе",
    "Финансирование информационного освещения реализации государственной молодeжной политики",
    " ТВ-сюжетов",
    " в интернет-СМИ",
    "Cуммарное Кол-во рег. объединений, ед",
    "Cуммарное Число членов рег. объединений, чел",
    "Cуммарное Число уч-в мер-й рег. объединений, чел",
    "Cуммарный Объeм фин.поддержки рег. объединений, руб",
    "Кол-во общ.объед.школ",
    "Кол-во общ.объед.СПО",
    "Кол-во общ.объед.вузов",
    "Число уч-в общ.объед.школ",
    "Число уч-в общ.объед.СПО",
    "Число уч-в общ.объед.вузов",
    "Cуммарное количество органов самоуправления",
    "Суммарный Объем финанс-я ОМСУ",
    "Cуммарный Объем финансирования УССУ",
    "Количество форумов, прошедших на территории субъекта",
    "Численность участников форумов	Объeм рег. финансирования",
    "Количество государственных учреждений на территории субъекта Российской Федерации, работающих с добровольцами (волонтерами) и реализующих совместные программы в следущих сферах:",
    "Общая численность граждан, вовлеченных в добровольческую деятельность на территории субъекта Российской Федерации, включая вовлеченных центрами (сообществами, объединениями) поддержки добровольчества (волонтерства), по направлениям сферы деятельности: добровольческая (волонтерская) деятельность в области образования",
    "Общая численность граждан, вовлеченных центрами (сообществами, объединениями) поддержки добровольчества (волонтерства) на базе образовательных организаций, некоммерческих организаций, государственных и муниципальных учреждений в добровольческую (волонтерскую) деятельность на территории субъекта Российской Федерации, в том числе:",
    "Общее количество региональных ресурсных центров поддержки добровольчества на территории субъекта Российской Федерации:",
=======
const params: { code: string, text: string }[] = [
    { code: "xa", text: "Номер" },
    { code: "xb", text: "Регион" },
    { code: "xc", text: "Округ" },
    { code: "xd", text: "Кол-во реализуемых направлений государственной молодeжной политики" },
    { code: "xe", text: "Суммарное кол-во грантов" },
    { code: "xf", text: "Суммарный бюджет грантов, руб" },
    { code: "xg", text: "Cуммарное кол-во детских и молодeжных общественных объединений" },
    { code: "xh", text: "Средняя численность молодeжи, задействованной в программном мероприятии" },
    { code: "xi", text: "Cуммарное кол-во структур" },
    { code: "xj", text: "Всего кол-во сотрудников" },
    { code: "xk", text: "С профильным образованием всего" },
    { code: "xl", text: "Объeм финансирования" },
    { code: "xm", text: "Расходы на мероприятия" },
    { code: "xn", text: "Расходы на административные функции" },
    { code: "xo", text: "Расходы на ремонт" },
    { code: "xp", text: "Количество новостей, опубликованных от региона в сфере государственной молодeжной политики" },
    { code: "xq", text: "Количество упоминаний регионального органа исполнительной власти" },
    { code: "xr", text: "Количество просмотров оф. сайта" },
    { code: "xs", text: "Численность подписчиков и участников в соц. сетях" },
    { code: "xt", text: "Количество публикаций в соц. сетях" },
    { code: "xu", text: "Кол-во пользователей, посетивших оф. сайт" },
    { code: "xv", text: "Упоминания в печатных СМИ" },
    { code: "xw", text: "Количество статей, опубликованных региональным органом исполнительной власти" },
    { code: "xx", text: "Количество статей, опубликованных в печатном издании субъекта" },
    { code: "xy", text: "Финансирование информационного освещения" },
    { code: "xz", text: "Кол-во упоминаний в ТВ-сюжетах" },
    { code: "ya", text: "Кол-во упоминаний в интернет-СМИ" },
    { code: "yb", text: "Cуммарное кол-во региональных объединений, ед" },
    { code: "yc", text: "Cуммарное число членов региональных объединений" },
    { code: "yd", text: "Cуммарное число уч-в мер-й рег. объединений, чел" },
    { code: "ye", text: "Cуммарный объeм фин. поддержки региональных объединений" },
    { code: "yf", text: "Кол-во школ" },
    { code: "yg", text: "Кол-во СПО" },
    { code: "yh", text: "Кол-во вузов" },
    { code: "yi", text: "Число учащихся школ" },
    { code: "yj", text: "Число учащихся СПО" },
    { code: "yk", text: "Число учащихся вузов" },
    { code: "yl", text: "Cуммарное кол-во органов самоуправления" },
    { code: "ym", text: "Суммарный объем финанс-я ОМСУ" },
    { code: "yn", text: "Cуммарный объем финанс-я УССУ" },
    { code: "yo", text: "Кол-во форумов, прошедших на территории субъекта" },
    { code: "yp", text: "Численность участников форумов" },
    { code: "yq", text: "Объeм регионального финансирования" },
    { code: "yr", text: "Кол-во госуд. учр. на территории субъекта, работающих с добровольцами (волонтерами)" },
    { code: "ys", text: "Число граждан, вовлеченных в добровольческую деятельность на тер. субъекта" },
    { code: "yt", text: "Число граждан, вовлеченных центрами поддержки добровольчества на базе образовательных организаций" },
    { code: "yu", text: "Кол-во региональных ресурсных центров поддержки добровольчества на тер. субъекта" }
>>>>>>> main
];


interface BarChartProps {
    indexes: number[];
}

const BarChart: React.FunctionComponent<BarChartProps> = ({ indexes }) => {

    const [selectedParam, setSelectedParam] = useState<string>(
        "Cуммарное Кол-во рег. объединений, ед"
    );
<<<<<<< HEAD
=======

    const [selectedParam2, setSelectedParam2] = useState<string>(
        "Cуммарное Кол-во рег. объединений, ед"
    );
>>>>>>> main

    function handleSelect(option: string) {
        console.log(`Selected option: ${option}`);
        setSelectedParam(option);
    }

    function handleSelect2(option: string) {
        console.log(`Selected option: ${option}`);
        setSelectedParam2(option);
    }

    const generateChartData = () => {

        const filteredRegions: RegionCSV[] = regions.filter(region => indexes.includes(region.xa))

        console.log("filtered", filteredRegions);

        console.log("param", selectedParam);

        // const data: number[] = filteredRegions.map((item: { [x: string]: any; }) => [item[selectedParam]])
        const data: number[] = filteredRegions.map(region => {
            const param = params.find(param => param.code === selectedParam);
            const key = param?.code || null;
            return !!key ? (region as any)[key] : null;
        })
        const data2: number[] = filteredRegions.map(region => {
            const param = params.find(param => param.code === selectedParam2);
            const key = param?.code || null;
            return !!key ? (region as any)[key] : null;
        })

        console.log("data", data)

        const labels: string[] = filteredRegions.map(region => region.xb);

        return {
            labels,
            datasets: [
                {
                    type:"bar",
                    label: "New Confirmed",
                    data,
                    backgroundColor: [
                        "rgba(255, 99, 132, 0.2)",
                        "rgba(54, 162, 235, 0.2)",
                        "rgba(255, 206, 86, 0.2)",
                        "rgba(75, 192, 192, 0.2)",
                        "rgba(153, 102, 255, 0.2)",
                        "rgba(255, 159, 64, 0.2)",
                    ],
                    borderColor: [
                        "rgba(255, 99, 132, 1)",
                        "rgba(54, 162, 235, 1)",
                        "rgba(255, 206, 86, 1)",
                        "rgba(75, 192, 192, 1)",
                        "rgba(153, 102, 255, 1)",
                        "rgba(255, 159, 64, 1)",
                    ],
                    borderWidth: 1,
                },
                {
                    type:"line",
                    label:"",
                    data: data2,
                    backgroundColor:"rgb(255,100,100)"
                }
            ],
        };
    };

    return (
        <><Flex width="70%">
            <Select
                color="#808080"
                placeholder={selectedParam}
                _placeholder={{ opacity: 0.4, color: "#808080" }}
                bg="#FFFFFF"
                w="350px"
                h="40px"
                borderRadius="30px"
                borderColor="#D4EF00"
                _hover={{ bg: "#FFFFFF", color: "#8A62D7" }}
                focusBorderColor="#D4EF00"
                errorBorderColor="#D4EF00"
                onChange={(event) => handleSelect(event.target.value)}
            >
                {params.map((item, index) => (
                    <option key={index} value={item.code}>
                        {item.text}
                    </option>
                ))}
            </Select>
            <Spacer />
            <Select
                color="#808080"
                placeholder={selectedParam2}
                _placeholder={{ opacity: 0.4, color: "#808080" }}
                bg="#FFFFFF"
                w="350px"
                h="40px"
                borderRadius="30px"
                borderColor="#D4EF00"
                _hover={{ bg: "#FFFFFF", color: "#8A62D7" }}
                focusBorderColor="#D4EF00"
                errorBorderColor="#D4EF00"
                onChange={(event) => handleSelect2(event.target.value)}
            >
                {params.map((item, index) => (
                    <option key={index} value={item.code}>
                        {item.text}
                    </option>
                ))}
            </Select>
        </Flex>
            <Chart type="bar" data={generateChartData()} options={options} />
        </>
    );
};

export default BarChart;